[tools]
# Tools need to be downloaded each time because if they were downloaded within 'tasks' (which run in parallel), the PATH propagation would not work properly.
# keep-sorted start
aws = "2.24.24"
eksctl = "0.205.0"
k3d = "5.8.3"
kind = "0.28.0"
# keep-sorted end

[settings]
experimental = true
trusted_config_paths = ["/"]
task_output = "prefix"

[env]
AWS_PRIMARY_DOMAIN = "aws.mylabs.dev"
AWS_K8S_DOMAIN = "k8s.{{ env.AWS_PRIMARY_DOMAIN }}"
# keep-sorted start
# Default AWS region if not overridden
AWS_REGION = "us-east-1"
CLICOLOR_FORCE = "1"
# Directory which contains the clusters mise configurations
CLUSTERS_DIRECTORY = "{{ config_root }}/clusters"
# Directory which contains the kubeconfig files for the created clusters (will be create if not exists)
CLUSTERS_KUBECONFIG_DIRECTORY = "{{ config_root }}/clusters/.kubeconfigs"
# Directory which contains the scripts to create and delete the clusters
CLUSTERS_RUN_SCRIPT_DIRECTORY = "{{ config_root }}/scripts"
GIT_REPOSITORY = "{{ exec(command='git config --get remote.origin.url') }}"
MISE_TASK_OUTPUT = "prefix"
# keep-sorted end

##############################################################################
# Management AWS Account - CloudFormation - Route53 + GitHub Actions Access + IAM role
##############################################################################

[tasks."create:aws-mgmt:cf-route53-gh-action-iam-role-oidc"]
description = 'Configure Management AWS Account - Create CloudFormation - Route53 + GitHub Actions Access + IAM role'
confirm = '''
Make sure you have the following AWS environment variables set for your "Management AWS account":
- AWS_ACCESS_KEY_ID
- AWS_SECRET_ACCESS_KEY
- (AWS_SESSION_TOKEN - in case you are using temporary credentials)
'''
env.AWS_CLOUDFORMATION_TEMPLATE_FILE = "cloudformation/route53-gh-action-iam-role-oidc.yml"
env.AWS_CLOUDFORMATION_STACK_NAME = "k8s-multicluster-gitops-route53-gh-action-iam-role-oidc"
env.AWS_CLOUDFORMATION_SUBJECT_CLAIM_FILTERS = "{{ env.AWS_CLOUDFORMATION_SUBJECT_CLAIM_FILTERS }}"
env.AWS_CLOUDFORMATION_MANAGED_POLICY_ARNS = "arn:aws:iam::aws:policy/AdministratorAccess"
env.AWS_CLOUDFORMATION_MGMT_IAM_ROLE_NAME = "GitHubFederatedRole"
env.AWS_CLOUDFORMATION_USER_ARN = "{{ env.AWS_USER_ARN }}"
run = '''
  #!/usr/bin/env bash
  set -eux
  eval aws cloudformation deploy --capabilities CAPABILITY_NAMED_IAM --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}" \
    --parameter-overrides "K8sDomain=${AWS_K8S_DOMAIN} ManagedPolicyArns=${AWS_CLOUDFORMATION_MANAGED_POLICY_ARNS} PrimaryDomain=${AWS_PRIMARY_DOMAIN} ManagementIamRoleName=${AWS_CLOUDFORMATION_MGMT_IAM_ROLE_NAME} SubjectClaimFilters=${AWS_CLOUDFORMATION_SUBJECT_CLAIM_FILTERS} UserArn=${AWS_CLOUDFORMATION_USER_ARN}" \
    --template-file "${AWS_CLOUDFORMATION_TEMPLATE_FILE}" \
    --tags "git_repository=${GIT_REPOSITORY}//${AWS_CLOUDFORMATION_TEMPLATE_FILE}"
  IAM_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}" --query 'Stacks[0].Outputs[? OutputKey==`GitHubActionsServiceRoleArn`].OutputValue' --output text)
  sed -i "s@^AWS_MGMT_IAM_ROLE_ARN.*@AWS_MGMT_IAM_ROLE_ARN = \"${IAM_ROLE_ARN}\"@" mise.local.toml
'''

[tasks."delete:aws-mgmt:cf-route53-gh-action-iam-role-oidc"]
description = 'Management AWS Account - Delete CloudFormation - Route53 + GitHub Actions Access + IAM role'
confirm = '''
Are you sure you want to delete the CloudFormation (Route53 + GitHub Actions Access + IAM role) from Management AWS Account?

Make sure you have the following AWS environment variables set for your "Management AWS account":
- AWS_ACCESS_KEY_ID
- AWS_SECRET_ACCESS_KEY
- AWS_SESSION_TOKEN - in case you are using temporary credentials
'''
env.AWS_CLOUDFORMATION_STACK_NAME = "k8s-multicluster-gitops-route53-gh-action-iam-role-oidc"
run = '''
  #!/usr/bin/env bash
  set -eux
  aws cloudformation delete-stack --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}"
  aws cloudformation wait stack-delete-complete --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}"
'''

##############################################################################
# AWS Tenant Account
##############################################################################

# https://repost.aws/knowledge-center/cross-account-access-iam

[tasks."create:aws-tenant:cf-allow-mgmt-iam-role-to-assume-tenant-iam-role"]
description = 'Create IAM role in Tenant AWS Account to allow Management AWS Account IAM role to assume it'
confirm = '''
Make sure you have the following AWS environment variables set for your "Tenant AWS account":
- AWS_ACCESS_KEY_ID
- AWS_SECRET_ACCESS_KEY
- (AWS_SESSION_TOKEN - in case you are using temporary credentials)
'''
env.AWS_MGMT_IAM_ROLE_ARN = "{{ env.AWS_MGMT_IAM_ROLE_ARN }}"
env.AWS_TENANT_IAM_ROLE_NAME = "K8sMulticlusterGitopsTenantIamRole"
env.AWS_TENANT_IAM_ROLE_POLICY_NAME = "K8sMulticlusterGitopsTenantIamRolePolicy"
env.AWS_CLOUDFORMATION_STACK_NAME = "k8s-multicluster-gitops-allow-mgmt-iam-role-to-assume-tenant-iam-role"
env.AWS_CLOUDFORMATION_TEMPLATE_FILE = "cloudformation/allow-mgmt-iam-role-to-assume-tenant-iam-role.yml"
run = '''
  #!/usr/bin/env bash
  set -eux
  eval aws cloudformation deploy --capabilities CAPABILITY_NAMED_IAM --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}" \
    --parameter-overrides "ManagementIamRoleArn=${AWS_MGMT_IAM_ROLE_ARN} TenantIamRoleName=${AWS_TENANT_IAM_ROLE_NAME} TenantIamRolePolicyName=${AWS_TENANT_IAM_ROLE_POLICY_NAME}" \
    --template-file "${AWS_CLOUDFORMATION_TEMPLATE_FILE}" \
    --tags "git_repository=${GIT_REPOSITORY}//${AWS_CLOUDFORMATION_TEMPLATE_FILE}"
'''

[tasks."delete:aws-tenant:cf-allow-mgmt-iam-role-to-assume-tenant-iam-role"]
description = 'Delete IAM role in Tenant AWS Account to allow Management AWS Account IAM role to assume it'
confirm = '''
Are you sure you want to delete the IAM role in Tenant AWS Account to allow Management AWS Account IAM role to assume it?
Make sure you have the following AWS environment variables set for your "Tenant AWS account":
- AWS_ACCESS_KEY_ID
- AWS_SECRET_ACCESS_KEY
- (AWS_SESSION_TOKEN - in case you are using temporary credentials)
'''
env.AWS_CLOUDFORMATION_STACK_NAME = "k8s-multicluster-gitops-allow-mgmt-iam-role-to-assume-tenant-iam-role"
run = '''
  #!/usr/bin/env bash
  set -eux
  aws cloudformation delete-stack --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}"
  aws cloudformation wait stack-delete-complete --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}"
'''

##############################################################################
# Kind
##############################################################################

[tasks."create:kind:kind01-internal"]
description = 'Create kind01.internal K8s cluster'
# Run mise again due to missing support for environment variables in tasks: https://github.com/jdx/mise/discussions/4593
run = 'mise run --env ${MISE_TASK_NAME##*:} create:${MISE_TASK_NAME##*:}'

[tasks."delete:kind:kind01-internal"]
description = 'Delete kind01.internal K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} delete:${MISE_TASK_NAME##*:}'

[tasks."create:kind:kind02-internal"]
description = 'Create kind02.internal K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} create:${MISE_TASK_NAME##*:}'

[tasks."delete:kind:kind02-internal"]
description = 'Delete kind02.internal K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} delete:${MISE_TASK_NAME##*:}'

[tasks."create-kind-all"]
description = 'Create kind K8s clusters'
run = 'mise run "create:kind:*"'

[tasks."delete-kind-all"]
description = 'Delete kind K8s clusters'
run = 'mise run "delete:kind:*"'

##############################################################################
# K3d
##############################################################################

[tasks."create:k3d:k3d01-internal"]
description = 'Create k3d01.internal K8s cluster'
# Run mise again due to missing support for environment variables in tasks: https://github.com/jdx/mise/discussions/4593
run = 'mise run --env ${MISE_TASK_NAME##*:} create:${MISE_TASK_NAME##*:}'

[tasks."delete:k3d:k3d01-internal"]
description = 'Delete k3d01.internal K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} delete:${MISE_TASK_NAME##*:}'

[tasks."create:k3d:k3d02-internal"]
description = 'Create k3d02.internal K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} create:${MISE_TASK_NAME##*:}'

[tasks."delete:k3d:k3d02-internal"]
description = 'Delete k3d02.internal K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} delete:${MISE_TASK_NAME##*:}'

[tasks."create-k3d-all"]
description = 'Create k3d K8s clusters'
run = 'mise run "create:k3d:*"'

[tasks."delete-k3d-all"]
description = 'Delete k3d K8s clusters'
run = 'mise run "delete:k3d:*"'

##############################################################################
# eksctl
##############################################################################

[tasks."create:eksctl:k01-k8s-aws-mylabs-dev"]
description = 'Create k01.k8s.aws.mylabs.dev K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} create:${MISE_TASK_NAME##*:}'

[tasks."delete:eksctl:k01-k8s-aws-mylabs-dev"]
description = 'Delete k01.k8s.aws.mylabs.dev K8s cluster'
run = 'mise run --env ${MISE_TASK_NAME##*:} delete:${MISE_TASK_NAME##*:}'

[tasks."create-eksctl-all"]
description = 'Create eksctl K8s clusters'
run = 'mise run "create:eksctl:*"'

[tasks."delete-eksctl-all"]
description = 'Delete eksctl K8s clusters'
run = 'mise run "delete:eksctl:*"'
